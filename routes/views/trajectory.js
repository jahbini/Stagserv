// Generated by CoffeeScript 1.9.3

/*
 * vim: et:ts=2:sw=2:sts=2
 */

(function() {
  var Clinic, Trajectory, User, base, keystone, winston;

  keystone = require('keystone');

  Trajectory = keystone.list('Trajectory');

  User = keystone.list('User');

  Clinic = keystone.list('Clinic');

  winston = require('winston');

  require('winston-loggly');

  winston.add(winston.transports.Loggly, {
    token: "823297ad-3de1-4c2c-a309-54020317f8bb",
    subdomain: "retrotope",
    tags: ["Winston-NodeJS"],
    json: true
  });


  /*
  winston.add winston.transports.Loggly, 
      token: "9f7aaef2-588b-46e9-ab0e-7b1dabc9da01"
      subdomain: "bamboocando"
      tags: ["Winston-NodeJS"]
      json:true
   */

  winston.log('info', "Retrotope Server Started");

  if (typeof window !== "undefined" && window !== null) {
    base = window;
  }

  if ((typeof module !== "undefined" && module !== null ? module.exports : void 0) != null) {
    base = module;
  }

  base.exports = function(req, res) {
    var bodyCheck, client, clinic, clinician, t, view;
    clinic = clinician = client = false;
    bodyCheck = function(body) {
      var summary;
      summary = {};
      if (!clinician) {
        return;
      }
      if (!client) {
        return;
      }
      if (!clinic) {
        return;
      }
      summary.clinic = clinic.name;
      summary.client = client.first + " " + client.last;
      summary.clinician = clinician.first + " " + clinician.last;
      summary.readings = "http://sensor.retrotope.com/keystone/trajectory/" + body.id;
      summary.testID = body.testID;
      summary.platformUUID = body.platformUUID;
      summary.captureDate = body.captureDate;
      console.log(summary);
      winston.log('info', summary, "Trajectory upload");
    };
    view = new keystone.View(req, res);
    t = new Trajectory.model(req.body);
    t.readings = JSON.stringify(req.body.readings);
    t.save(function(err) {
      if (err) {
        console.error(err);
        res.status(500).send({
          error: err
        });
      } else {
        User.model.findById(t.client).exec(function(err, u) {
          if (err) {
            console.error(err);
            return;
          }
          client = u.name;
          bodyCheck(t);
        });
        User.model.findById(t.clinician).exec(function(err, u) {
          if (err) {
            console.error(err);
            return;
          }
          clinician = u.name;
          bodyCheck(t);
        });
        Clinic.model.findById(t.clinic).exec(function(err, u) {
          if (err) {
            console.error(err);
            return;
          }
          clinic = u;
          bodyCheck(t);
        });
        console.log('Data Trajectory added ' + ' to the database.');
        res.status(200).send({
          message: "OK"
        });
      }
    });
  };

}).call(this);
